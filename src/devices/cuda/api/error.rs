pub type CudaResult<T> = std::result::Result<T, CudaErrorKind>;

impl CudaErrorKind {
    pub fn as_str(&self) -> &'static str {
        match self {
            Self::InvalidValue => "Invalid value",
            Self::OutOfMemory => "Out of memory",
            Self::NotInitialized => "Not initialized",
            Self::Deinitialized => "Deinitialized",
            Self::ProfilerDisabled => "Profiler disabled",
            Self::ProfilerNotInitialized => "Profiler not initialized",
            Self::ProfilerAlreadyStarted => "Profiler already started",
            Self::ProfilerAlreadyStopped => "Profiler already stopped",
            Self::NoDevice => "No device",
            Self::InvalidDevice => "Invalid device",
            Self::InvalidImage => "Invalid image",
            Self::InvalidContext => "Invalid context",
            Self::ContextAlreadyCurrent => "Context already current",
            Self::MapFailed => "Map failed",
            Self::UnmapFailed => "Unmap failed",
            Self::ArrayIsMapped => "Array is mapped",
            Self::AlreadyMapped => "Already mapped",
            Self::NoBinaryForGpu => "No binary for GPU",
            Self::AlreadyAcquired => "Already acquired",
            Self::NotMapped => "Not mapped",
            Self::NotMappedAsArray => "Not mapped as array",
            Self::NotMappedAsPointer => "Not mapped as pointer",
            Self::EccUncorrectable => "ECC uncorrectable error",
            Self::UnsupportedLimit => "Unsupported limit",
            Self::ContextAlreadyInUse => "Context already in use",
            Self::PeerAccessUnsupported => "Peer access unsupported",
            Self::InvalidPtx => "Invalid PTX",
            Self::InvalidGraphicsContext => "Invalid graphics context",
            Self::NvlinkUncorrectable => "NVLink uncorrectable error",
            Self::JitCompilerNotFound => "JIT compiler not found",
            Self::InvalidSource => "Invalid source",
            Self::FileNotFound => "File not found",
            Self::SharedObjectSymbolNotFound => "Shared object symbol not found",
            Self::SharedObjectInitFailed => "Shared object init failed",
            Self::OperatingSystem => "Operating system error",
            Self::InvalidHandle => "Invalid handle",
            Self::IllegalState => "Illegal state",
            Self::NotFound => "Not found",
            Self::NotReady => "Not ready",
            Self::IllegalAddress => "Illegal address",
            Self::LaunchOutOfResources => "Launch out of resources",
            Self::LaunchTimeout => "Launch timeout",
            Self::LaunchIncompatibleTexturing => "Launch incompatible texturing",
            Self::PeerAccessAlreadyEnabled => "Peer access already enabled",
            Self::PeerAccessNotEnabled => "Peer access not enabled",
            Self::PrimaryContextActive => "Primary context active",
            Self::ContextIsDestroyed => "Context is destroyed",
            Self::Assert => "Assertion error",
            Self::TooManyPeers => "Too many peers",
            Self::HostMemoryAlreadyRegistered => "Host memory already registered",
            Self::HostMemoryNotRegistered => "Host memory not registered",
            Self::HardwareStackError => "Hardware stack error",
            Self::IllegalInstruction => "Illegal instruction",
            Self::MisalignedAddress => "Misaligned address",
            Self::InvalidAddressSpace => "Invalid address space",
            Self::InvalidPc => "Invalid PC",
            Self::LaunchFailed => "Launch failed",
            Self::CooperativeLaunchTooLarge => "Cooperative launch too large",
            Self::NotPermitted => "Not permitted",
            Self::NotSupported => "Not supported",
            Self::SystemNotReady => "System not ready",
            Self::SystemDriverMismatch => "System driver mismatch",
            Self::CompatNotSupportedOnDevice => "Compatibility not supported on device",
            Self::StreamCaptureUnsupported => "Stream capture unsupported",
            Self::StreamCaptureInvalidated => "Stream capture invalidated",
            Self::StreamCaptureMerge => "Stream capture merge",
            Self::StreamCaptureUnmatched => "Stream capture unmatched",
            Self::StreamCaptureUnjoined => "Stream capture unjoined",
            Self::StreamCaptureIsolation => "Stream capture isolation",
            Self::StreamCaptureImplicit => "Stream capture implicit",
            Self::CapturedEvent => "Captured event",
            Self::StreamCaptureWrongThread => "Stream capture wrong thread",
            Self::Timeout => "Timeout",
            Self::GraphExecUpdateFailure => "Graph exec update failure",
            Self::Unknown => "Unknown error",
            Self::InvalidDeviceIdx => {
                "(InvalidDeviceIdx) Invalid device idx, specific CUDA device not found"
            }
            Self::InvalidAllocSize => "(InvalidAllocSize) Invalid allocation size",
        }
    }
}

#[derive(Clone, Copy)]
pub enum CudaErrorKind {
    InvalidValue = 1,
    OutOfMemory = 2,
    NotInitialized = 3,
    Deinitialized = 4,
    ProfilerDisabled = 5,
    ProfilerNotInitialized = 6,
    ProfilerAlreadyStarted = 7,
    ProfilerAlreadyStopped = 8,
    NoDevice = 100,
    InvalidDevice = 101,
    InvalidImage = 200,
    InvalidContext = 201,
    ContextAlreadyCurrent = 202,
    MapFailed = 205,
    UnmapFailed = 206,
    ArrayIsMapped = 207,
    AlreadyMapped = 208,
    NoBinaryForGpu = 209,
    AlreadyAcquired = 210,
    NotMapped = 211,
    NotMappedAsArray = 212,
    NotMappedAsPointer = 213,
    EccUncorrectable = 214,
    UnsupportedLimit = 215,
    ContextAlreadyInUse = 216,
    PeerAccessUnsupported = 217,
    InvalidPtx = 218,
    InvalidGraphicsContext = 219,
    NvlinkUncorrectable = 220,
    JitCompilerNotFound = 221,
    InvalidSource = 300,
    FileNotFound = 301,
    SharedObjectSymbolNotFound = 302,
    SharedObjectInitFailed = 303,
    OperatingSystem = 304,
    InvalidHandle = 400,
    IllegalState = 401,
    NotFound = 500,
    NotReady = 600,
    IllegalAddress = 700,
    LaunchOutOfResources = 701,
    LaunchTimeout = 702,
    LaunchIncompatibleTexturing = 703,
    PeerAccessAlreadyEnabled = 704,
    PeerAccessNotEnabled = 705,
    PrimaryContextActive = 708,
    ContextIsDestroyed = 709,
    Assert = 710,
    TooManyPeers = 711,
    HostMemoryAlreadyRegistered = 712,
    HostMemoryNotRegistered = 713,
    HardwareStackError = 714,
    IllegalInstruction = 715,
    MisalignedAddress = 716,
    InvalidAddressSpace = 717,
    InvalidPc = 718,
    LaunchFailed = 719,
    CooperativeLaunchTooLarge = 720,
    NotPermitted = 800,
    NotSupported = 801,
    SystemNotReady = 802,
    SystemDriverMismatch = 803,
    CompatNotSupportedOnDevice = 804,
    StreamCaptureUnsupported = 900,
    StreamCaptureInvalidated = 901,
    StreamCaptureMerge = 902,
    StreamCaptureUnmatched = 903,
    StreamCaptureUnjoined = 904,
    StreamCaptureIsolation = 905,
    StreamCaptureImplicit = 906,
    CapturedEvent = 907,
    StreamCaptureWrongThread = 908,
    Timeout = 909,
    GraphExecUpdateFailure = 910,
    Unknown = 999,
    InvalidAllocSize = 5000,
    InvalidDeviceIdx = 5001,
}

impl From<u32> for CudaErrorKind {
    fn from(value: u32) -> Self {
        match value {
            1 => CudaErrorKind::InvalidValue,
            2 => CudaErrorKind::OutOfMemory,
            3 => CudaErrorKind::NotInitialized,
            4 => CudaErrorKind::Deinitialized,
            5 => CudaErrorKind::ProfilerDisabled,
            6 => CudaErrorKind::ProfilerNotInitialized,
            7 => CudaErrorKind::ProfilerAlreadyStarted,
            8 => CudaErrorKind::ProfilerAlreadyStopped,
            100 => CudaErrorKind::NoDevice,
            101 => CudaErrorKind::InvalidDevice,
            200 => CudaErrorKind::InvalidImage,
            201 => CudaErrorKind::InvalidContext,
            202 => CudaErrorKind::ContextAlreadyCurrent,
            205 => CudaErrorKind::MapFailed,
            206 => CudaErrorKind::UnmapFailed,
            207 => CudaErrorKind::ArrayIsMapped,
            208 => CudaErrorKind::AlreadyMapped,
            209 => CudaErrorKind::NoBinaryForGpu,
            210 => CudaErrorKind::AlreadyAcquired,
            211 => CudaErrorKind::NotMapped,
            212 => CudaErrorKind::NotMappedAsArray,
            213 => CudaErrorKind::NotMappedAsPointer,
            214 => CudaErrorKind::EccUncorrectable,
            215 => CudaErrorKind::UnsupportedLimit,
            216 => CudaErrorKind::ContextAlreadyInUse,
            217 => CudaErrorKind::PeerAccessUnsupported,
            218 => CudaErrorKind::InvalidPtx,
            219 => CudaErrorKind::InvalidGraphicsContext,
            220 => CudaErrorKind::NvlinkUncorrectable,
            221 => CudaErrorKind::JitCompilerNotFound,
            300 => CudaErrorKind::InvalidSource,
            301 => CudaErrorKind::FileNotFound,
            302 => CudaErrorKind::SharedObjectSymbolNotFound,
            303 => CudaErrorKind::SharedObjectInitFailed,
            304 => CudaErrorKind::OperatingSystem,
            400 => CudaErrorKind::InvalidHandle,
            401 => CudaErrorKind::IllegalState,
            500 => CudaErrorKind::NotFound,
            600 => CudaErrorKind::NotReady,
            700 => CudaErrorKind::IllegalAddress,
            701 => CudaErrorKind::LaunchOutOfResources,
            702 => CudaErrorKind::LaunchTimeout,
            703 => CudaErrorKind::LaunchIncompatibleTexturing,
            704 => CudaErrorKind::PeerAccessAlreadyEnabled,
            705 => CudaErrorKind::PeerAccessNotEnabled,
            708 => CudaErrorKind::PrimaryContextActive,
            709 => CudaErrorKind::ContextIsDestroyed,
            710 => CudaErrorKind::Assert,
            711 => CudaErrorKind::TooManyPeers,
            712 => CudaErrorKind::HostMemoryAlreadyRegistered,
            713 => CudaErrorKind::HostMemoryNotRegistered,
            714 => CudaErrorKind::HardwareStackError,
            715 => CudaErrorKind::IllegalInstruction,
            716 => CudaErrorKind::MisalignedAddress,
            717 => CudaErrorKind::InvalidAddressSpace,
            718 => CudaErrorKind::InvalidPc,
            719 => CudaErrorKind::LaunchFailed,
            720 => CudaErrorKind::CooperativeLaunchTooLarge,
            800 => CudaErrorKind::NotPermitted,
            801 => CudaErrorKind::NotSupported,
            802 => CudaErrorKind::SystemNotReady,
            803 => CudaErrorKind::SystemDriverMismatch,
            804 => CudaErrorKind::CompatNotSupportedOnDevice,
            900 => CudaErrorKind::StreamCaptureUnsupported,
            901 => CudaErrorKind::StreamCaptureInvalidated,
            902 => CudaErrorKind::StreamCaptureMerge,
            903 => CudaErrorKind::StreamCaptureUnmatched,
            904 => CudaErrorKind::StreamCaptureUnjoined,
            905 => CudaErrorKind::StreamCaptureIsolation,
            906 => CudaErrorKind::StreamCaptureImplicit,
            907 => CudaErrorKind::CapturedEvent,
            908 => CudaErrorKind::StreamCaptureWrongThread,
            909 => CudaErrorKind::Timeout,
            910 => CudaErrorKind::GraphExecUpdateFailure,
            999 => CudaErrorKind::Unknown,
            5000 => CudaErrorKind::InvalidAllocSize,
            5001 => CudaErrorKind::InvalidDeviceIdx,
            _ => CudaErrorKind::Unknown,
        }
    }
}

impl core::fmt::Debug for CudaErrorKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.as_str())
    }
}

impl core::fmt::Display for CudaErrorKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{self:?}")
    }
}

impl std::error::Error for CudaErrorKind {}
